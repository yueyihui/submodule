#!/usr/bin/env python
import os
import sys
import subprocess
import xml.dom.minidom as xmldom
from optparse import OptionParser

GIT = 'git'
USAGE = "repo init -m -u url -b branch -d dst"
optParser = OptionParser(USAGE)
optParser.add_option("-u",action = "store",type="string",dest = "url")
optParser.add_option("-b",action = "store",type="string",dest = "branch")
optParser.add_option("-d",action = "store",type="string",dest = "dst")
optParser.add_option("-m",action = "store_true",dest="submodule",default='False')
#optParser.add_option("-v","--vison", action="store_true", dest="verbose", default='False', help="make lots of noise [default]")

def _print(*objects, **kwargs):
    sep = kwargs.get('sep', ' ')
    end = kwargs.get('end', '\n')
    out = kwargs.get('file', sys.stdout)
    out.write(sep.join(objects) + end)

class CloneFailure(Exception):

  """Indicate the remote clone of repo itself failed.
  """

class CheckoutFailure(Exception):

  """Indicate the checkout failed.
  """

class AddSubModuleFailure(Exception):

  """Indicate the addSubModule failed.
  """

def _Clone(url, dst):
    if not os.path.exists(dst):
        os.mkdir(dst)
    cmd = [GIT, 'clone', '--recursive', url]
    try:
        proc = subprocess.Popen(cmd, cwd=dst)#get into 'cwd' as workspace before subprocess execute
    except OSError as e:
        _print(file=sys.stderr)
        _print("fatal: '%s' is not available" % GIT, file=sys.stderr)
        _print('fatal: %s' % e, file=sys.stderr)
        _print(file=sys.stderr)
        _print('Please make sure %s is installed and in your path.' % GIT,
                file=sys.stderr)
        raise CloneFailure()
    if proc.wait() != 0:
        _print('fatal: could not clone %s' % dst, file=sys.stderr)
        raise CloneFailure()
    else:
        return True

def _Checkout(branch, dst):
    cmd = [GIT]
    try:
        proc = subprocess.Popen(cmd, cwd=dst)#get into 'cwd' as workspace before subprocess execute
    except OSError as e:
        _print(file=sys.stderr)
        _print("fatal: '%s' is not available" % GIT, file=sys.stderr)
        _print('fatal: %s' % e, file=sys.stderr)
        _print(file=sys.stderr)
        _print('Please make sure %s is installed and in your path.' % GIT,
                file=sys.stderr)
        raise CheckoutFailure()
    if proc.wait() != 0:
        _print('fatal: could not clone %s' % dst, file=sys.stderr)
        raise CheckoutFailure()
    else:
        return True

def _AddSubModule(submodule_url, branch, dst):
    cmd = [GIT, 'submodule', 'add', '-b', branch, submodule_url, dst]
    try:
        proc = subprocess.Popen(cmd)
    except OSError as e:
        _print(file=sys.stderr)
        _print("fatal: '%s' is not available" % GIT, file=sys.stderr)
        _print('fatal: %s' % e, file=sys.stderr)
        _print(file=sys.stderr)
        _print('Please make sure %s is installed and in your path.' % GIT,
                file=sys.stderr)
        raise AddSubModuleFailure()
    if proc.wait() != 0:
        _print('fatal: could not clone %s' % dst, file=sys.stderr)
        raise AddSubModuleFailure()
    else:
        return True

def _addSubTree():
    print "_addSubTree"

def _ParseXml():
    xmlfilepath = os.path.abspath("default.xml")
    domobj = xmldom.parse(xmlfilepath)
    elementobj = domobj.documentElement
    subElementObj = elementobj.getElementsByTagName("project")
    return subElementObj


def _ParseArguments(args):
    cmd = None
    arg = []
    for i in range(len(args)):
        a = args[i]
        if not a.startswith('-'):
          cmd = a
          arg = args[i + 1:]
          break
    return cmd, arg

def main(orig_args):
    cmd, _arg = _ParseArguments(orig_args)
    opt, args = optParser.parse_args(_arg)
    if args:
        print 'args False'
        sys.exit(1)

    dst = os.getcwd()
    if cmd == 'init':
        if opt.dst is None:
            opt.dst = dst
        _Clone(opt.url, opt.dst)
    elif cmd == 'add':
        if opt.submodule == True:
            _AddSubModule(opt.url, opt.branch, opt.dst)
        else:
            print "isn't support subtree, use -m specific submodule"
    elif cmd == 'batch':
        subElementObj = _ParseXml();
        for i in range((len(subElementObj))):
            if opt.submodule == True:
                _AddSubModule(subElementObj[i].getAttribute("url"),
                    subElementObj[i].getAttribute("branch"),
                        subElementObj[i].getAttribute("path"))
            else:
                print "isn't support subtree, use -m specific submodule"
                sys.exit(1)
    else:
        print 'cmd False'
        sys.exit(1)

if __name__ == '__main__':
    main(sys.argv[1:])